import React, { useState, useEffect, useRef } from 'react';
import EditProfileModal from '../../components/EditProfileModal/EditProfileModal';
import defaultAvatarImage from '../../assets/images/default-avatar.png';
import defaultPostImage from '../../assets/images/default-post.png';
import EditIcon from '../../assets/icons/edit.svg';
import PlusIcon from '../../assets/icons/plus.svg';

// –ò–º–ø–æ—Ä—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
import { getUserById, getPostsByUserId, posts, categories } from '../../mockData/testData';

import styles from './UserProfilePage.module.css';

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
const CreatePostModal = ({ isOpen, onClose, onSubmit }) => {
  const [postText, setPostText] = useState('');
  const [postImage, setPostImage] = useState(null);
  const [imagePreview, setImagePreview] = useState(null);
  const [selectedCategories, setSelectedCategories] = useState([]);
  const [isDragging, setIsDragging] = useState(false);
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const fileInputRef = useRef(null);

  const handleDragEnter = e => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(true);
  };

  const handleDragLeave = e => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(false);
  };

  const handleDragOver = e => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(true);
  };

  const handleDrop = e => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(false);

    const file = e.dataTransfer.files[0];
    if (file && file.type.startsWith('image/')) {
      setPostImage(file);
      setImagePreview(URL.createObjectURL(file));
    }
  };

  const handleImageClick = () => {
    fileInputRef.current.click();
  };

  const handleFileChange = e => {
    const file = e.target.files[0];
    if (file) {
      setPostImage(file);
      setImagePreview(URL.createObjectURL(file));
    }
  };

  const handleRemoveImage = e => {
    e.stopPropagation();
    setPostImage(null);
    setImagePreview(null);
  };

  const handleSubmit = e => {
    e.preventDefault();
    onSubmit({
      text: postText,
      image: postImage,
      categories: selectedCategories,
    });
    setPostText('');
    setPostImage(null);
    setImagePreview(null);
    setSelectedCategories([]);
  };

  const toggleCategory = category => {
    setSelectedCategories(prev =>
      prev.includes(category) ? prev.filter(c => c !== category) : [...prev, category]
    );
  };

  if (!isOpen) return null;

  return (
    <div className={styles.modalOverlay} onClick={onClose}>
      <div className={styles.modalContent} onClick={e => e.stopPropagation()}>
        <h3 className={styles.modalTitle}>–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç</h3>

        <form onSubmit={handleSubmit} className={styles.createPostForm}>
          {/* –û–±–ª–∞—Å—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
          <div
            className={`${styles.imageUploadArea} ${isDragging ? styles.dragging : ''} ${
              imagePreview ? styles.hasImage : ''
            }`}
            onClick={handleImageClick}
            onDragEnter={handleDragEnter}
            onDragLeave={handleDragLeave}
            onDragOver={handleDragOver}
            onDrop={handleDrop}
          >
            <input
              ref={fileInputRef}
              type="file"
              accept="image/*"
              onChange={handleFileChange}
              className={styles.hiddenFileInput}
            />

            {imagePreview ? (
              <div className={styles.imagePreviewContainer}>
                <img src={imagePreview} alt="Preview" className={styles.imagePreview} />
                <button
                  type="button"
                  onClick={handleRemoveImage}
                  className={styles.removeImageButton}
                >
                  ‚úï
                </button>
              </div>
            ) : (
              <div className={styles.uploadPrompt}>
                <div className={styles.uploadIcon}>üì∑</div>
                <p>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—é–¥–∞ –∏–ª–∏ –∫–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞</p>
              </div>
            )}
          </div>

          {/* –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ */}
          <textarea
            value={postText}
            onChange={e => setPostText(e.target.value)}
            placeholder="–ß—Ç–æ —É –≤–∞—Å –Ω–æ–≤–æ–≥–æ?"
            className={styles.postTextArea}
          />

          {/* –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
          <div className={styles.categoriesDropdown}>
            <button
              type="button"
              className={styles.dropdownToggle}
              onClick={() => setIsDropdownOpen(!isDropdownOpen)}
            >
              {selectedCategories.length
                ? `–í—ã–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${selectedCategories.length}`
                : '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}
            </button>

            {isDropdownOpen && (
              <div className={styles.dropdownMenu}>
                {categories.map(category => (
                  <label key={category} className={styles.categoryOption}>
                    <input
                      type="checkbox"
                      checked={selectedCategories.includes(category)}
                      onChange={() => toggleCategory(category)}
                    />
                    <span>{category}</span>
                  </label>
                ))}
              </div>
            )}
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          <div className={styles.modalActions}>
            <button
              type="submit"
              className={styles.submitButton}
              disabled={!postText.trim() && !postImage}
            >
              –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
            </button>
            <button type="button" onClick={onClose} className={styles.cancelButton}>
              –û—Ç–º–µ–Ω–∞
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

const UserProfilePage = () => {
  const currentUserId = 1; // ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [user, setUser] = useState(null);
  const [userPosts, setUserPosts] = useState([]); // –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–æ–≤
  const [isModalOpen, setIsModalOpen] = useState(false);

  const [isEditModalOpen, setIsEditModalOpen] = useState(false);

  const handleEditProfile = updatedData => {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('Updated profile data:', updatedData);
  };

  useEffect(() => {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userData = getUserById(currentUserId);
    setUser(userData);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–∞–π–∫–∞—Ö –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    const userPostsData = getPostsByUserId(currentUserId)
      .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
      .map(post => ({
        ...post,
        likes: post.likedBy.length,
        isLiked: post.likedBy.includes(currentUserId),
      }));
    setUserPosts(userPostsData);
  }, []);

  const formatDate = dateString => {
    const date = new Date(dateString);
    const today = new Date();
    const isToday = date.toDateString() === today.toDateString();

    if (isToday) {
      return date.toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit',
      });
    }

    return date.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
    });
  };

  const handleCreatePost = postData => {
    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
    const newPost = {
      id: Date.now(),
      authorId: currentUserId,
      text: postData.text,
      image: postData.image ? URL.createObjectURL(postData.image) : null,
      categories: postData.categories,
      createdAt: new Date().toISOString(),
      likedBy: [],
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    setUserPosts(prevPosts => [newPost, ...prevPosts]);
    setIsModalOpen(false);
  };

  const handleLike = postId => {
    setUserPosts(prevPosts =>
      prevPosts.map(post => {
        if (post.id === postId) {
          const newLikedBy = post.isLiked
            ? post.likedBy.filter(id => id !== currentUserId)
            : [...post.likedBy, currentUserId];

          return {
            ...post,
            likedBy: newLikedBy,
            isLiked: !post.isLiked,
            likes: newLikedBy.length,
          };
        }
        return post;
      })
    );
  };

  if (!user) return null;

  return (
    <div className={styles.profileContainer}>
      <div className={styles.leftSection}>
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */}
        <div className={styles.userInfo}>
          <img
            src={user.avatar || defaultAvatarImage}
            alt="Profile"
            className={styles.userAvatar}
            onError={e => {
              e.target.src = defaultAvatarImage;
            }}
          />
          <div className={styles.userName}>
            <span>{user.firstName}</span>
            <span>{user.lastName}</span>
          </div>
          <button className={styles.editProfileButton} onClick={() => setIsEditModalOpen(true)}>
            <img src={EditIcon} alt="Edit profile" />
          </button>

          <EditProfileModal
            isOpen={isEditModalOpen}
            onClose={() => setIsEditModalOpen(false)}
            user={user}
            onSave={handleEditProfile}
          />
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ */}
        <button className={styles.createPostButton} onClick={() => setIsModalOpen(true)}>
          <img src={PlusIcon} alt="Create post" />
          <span>–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç</span>
        </button>

        {/* –ü–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
        <div className={styles.postsContainer}>
          {userPosts.map(post => (
            <article key={post.id} className={styles.post}>
              <div className={styles.postHeader}>
                <img
                  src={user.avatar || defaultAvatarImage}
                  alt="Avatar"
                  className={styles.authorAvatar}
                  onError={e => {
                    e.target.src = defaultAvatarImage;
                  }}
                />
                <div className={styles.authorInfo}>
                  <div className={styles.authorName}>
                    <span>{user.firstName}</span>
                    <span>{user.lastName}</span>
                  </div>
                  <div className={styles.postDate}>{formatDate(post.createdAt)}</div>
                </div>
              </div>

              {post.text && <p className={styles.postText}>{post.text}</p>}

              {post.image && (
                <div className={styles.postContent}>
                  <img
                    src={post.image || defaultPostImage}
                    alt="Post content"
                    className={styles.postImage}
                    onError={e => {
                      e.target.src = defaultPostImage;
                    }}
                  />
                  <div className={styles.postActions}>
                    <button
                      className={`${styles.likeButton} ${post.isLiked ? styles.liked : ''}`}
                      onClick={() => handleLike(post.id)}
                    >
                      {post.isLiked ? '‚ù§Ô∏è' : 'ü§ç'} {post.likes}
                    </button>
                  </div>
                </div>
              )}
            </article>
          ))}
        </div>
      </div>

      {/* –ü—Ä–∞–≤–∞—è —Å–µ–∫—Ü–∏—è (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ) */}
      <div className={styles.rightSection}>{/* –¢—É—Ç –±—É–¥—É—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã–±—Ä–∞–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º */}</div>

      <CreatePostModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        onSubmit={handleCreatePost}
      />
    </div>
  );
};

export default UserProfilePage;
